apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: api
spec:
  serviceAccountName: quay-login
  params:
    - name: IMAGE
      value: quay.io/sm43/cicd-api
    - name: TAG
      value: v1
    - name: HUB_NAMESPACE
      value: tekton-hub
  workspaces:
    - name: shared-workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 3Gi
  pipelineSpec:
    params:
      - name: IMAGE
      - name: TAG  
      - name: HUB_NAMESPACE
    workspaces:
      - name: shared-workspace
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: shared-workspace
        params:
          - name: url
            value: https://github.com/sm43/hub
          - name: subdirectory
            value: ""
          - name: deleteExisting
            value: "true"
          - name: revision
            value: cicd
      # - name: lint
      #   taskRef:
      #     name: golangci-lint
      #   workspaces:
      #     - name: source
      #       workspace: shared-workspace
      #   params:
      #     - name: package
      #       value: github.com/tektoncd/hub
      #     - name: path_context
      #       value: "api"
      #     - name: flags
      #       value: "-v --timeout 10m"
      #     - name: version
      #       value: v1.31.0
      #   runAfter:
      #     - fetch-repository
      - name: unit-test
        taskRef:
          name: golang-db-test
        workspaces:
          - name: source
            workspace: shared-workspace
        params:
          - name: package
            value: github.com/sm43/hub
          - name: packages
            value: ./pkg/...
          - name: path_context
            value: api
          - name: flags
            value: "-p 1 -v --timeout 10m -race -coverprofile=coverage.txt -covermode=atomic"
        runAfter:
          - fetch-repository
      # - name: find-coverage
      #   taskRef:
      #     name: golang-test
      #   workspaces:
      #     - name: source
      #       workspace: shared-workspace
      #   params:
      #     - name: package
      #       value: github.com/tektoncd/hub
      #     - name: path_context
      #       value: api
      #     - name: flags
      #       value: "-race -coverprofile=coverage.txt -covermode=atomic"
      #   runAfter:
      #     - fetch-repository
      - name: upload-coverage
        taskRef:
          name: codecov
        params:
          - name: args
            value:
              - -f
              - api/coverage.txt
        workspaces:
          - name: source
            workspace: shared-workspace
        runAfter:
          - unit-test
      - name: build-push-image
        taskRef:
          name: buildah
        workspaces:
          - name: source
            workspace: shared-workspace
        params:
          - name: IMAGE
            value: $(params.IMAGE):$(params.TAG)
          - name: CONTEXT
            value: "api"
          - name: FORMAT
            value: "docker"
        runAfter:
          - upload-coverage
      # - name: check-api-deployment
      #   taskRef:
      #     name: kubernetes-actions
      #   params:
      #     - name: script
      #       value: |
      #         kubectl describe deployment api -n "$(params.HUB_NAMESPACE)" >/dev/null 2>/dev/null
      #         if [[ $? -eq 0 ]]; then
      #           printf yes | tee /tekton/results/output-result
      #         else
      #           printf no | tee /tekton/results/output-result
      #         fi
      #   runAfter:
      #     - build-push-image  
      # - name: patch-api-image
      #   taskRef:
      #     name: kubernetes-actions
      #   params:
      #     - name: script
      #       value: |
      #         kubectl patch deployment api --patch='{"spec":{"template":{"spec":{
      #           "containers":[{
      #             "name": "api",
      #             "image": "$(params.IMAGE):$(params.TAG)"
      #           }]
      #         }}}}' -n $(params.HUB_NAMESPACE)
      #   when:
      #     - input: "$(tasks.check-api-deployment.results.output-result)"
      #       operator: in
      #       values: ["yes"]
      #   runAfter:
      #     - check-api-deployment 
      # - name: create-deployment
      #   taskRef:
      #     name: kubernetes-actions
      #   params:
      #     - name: script
      #       value: |
      #         kubectl apply --filename ui/config
      #         kubectl apply --filename ui/config/openshift
      #         # patch the latest built image
      #         kubectl patch deployment ui --patch='{"spec":{"template":{"spec":{
      #           "containers":[{
      #             "name": "ui",
      #             "image": "$(params.IMAGE):$(params.TAG)"
      #           }]
      #         }}}}' -n $(params.HUB_NAMESPACE)
      #   runAfter:
      #     - patch-api-image  


